#ifndef	TASKCONTROLBLOCK_H
#define TASKCONTROLBLOCK_H

#include <Task.h>

/**
 * @brief The Task struct holds all necessary information for a tast to schedule, the task pointer, the timer
 * @brief and the information whether it is a single shot or not.
 * @author Marc Vester (XaserLE)
 */
class TaskControlBlock
{
	public:
		/**
		 * @brief Constructor, initializes the task.
		 */
		TaskControlBlock(void);

		/**
		 * @brief Destructor, deletes the task.
		 */
		~TaskControlBlock();

		/**
		 * @brief Inserts a new task if this one is not in use.
		 * @param task_ The new task.
		 * @param timer_ Time till next execution.
		 * @param reshot_ Indicates whether this is a periodically task or not.
		 * @param isTaskHelper_ If true, this task was generated by the scheduler, so we will take ownership.
		 * @param isTaskHelperWithData_ Same as above, but this task helper has data to forward to his function pointer.
		 * @return True if task was added successfully, false otherwise.
		 */
		bool set(Task * task_, unsigned long timer_, bool reshot_, bool isTaskHelper_, bool isTaskHelperWithData_);

		/**
		 * @brief Will call the update function of the task.
		 */
		void run(void);

		/**
		 * @brief Access method.
		 * @return True if this is a TaskHelper, false otherwise.
		 */
		bool isTaskHelper(void) const;

		/**
		 * @brief Access method.
		 * @return True if this is a TaskHelperWithData, false otherwise.
		 */
		bool isTaskHelperWithData(void) const;

		/**
		 * @brief Reinitializes this TaskControlBlock and deletes the the task pointer if it is a TaskHelper(WithData).
		 */
		void remove(void);

		/**
		 * @brief Compares the task in this block with the given one.
		 * @param task_ Pointer to the task for comparison.
		 * @return True if the task in this block matches task_, false otherwise.
		 */
		bool compare(Task * task_) const;

		/**
		 * @brief Compares the task in this block with the given one.
		 * @param task_ Pointer to the function of the task for comparison.
		 * @return True if the task in this block matches task_, false otherwise.
		 */
		bool compare(void (* func_)(void)) const;

		/**
		 * @brief Compares the task in this block with the given one.
		 * @param task_ Pointer to the function of the task for comparison.
		 * @return True if the task in this block matches task_, false otherwise.
		 */
		bool compare(void (* func_)(void *)) const;

		/**
		 * @brief Access method.
		 * @return Pointer to the task in this block.
		 */
		Task const * task(void) const;

		/**
		 * @brief Access method.
		 * @return The timer of this task.
		 */
		unsigned long timer(void) const;

		/**
		 * @brief Access method.
		 * @return Time of last execution.
		 */
		unsigned long timestamp(void) const;

		/**
		 * @brief Access method.
		 * @return True if there is no task in this block, false otherwise.
		 */
		bool isFree(void) const;

		/**
		 * @brief Access method.
		 * @return True if there is a task in this block, false otherwise.
		 */
		bool isUsed(void) const;

		/**
		 * @brief Access method.
		 * @return True if this is a periodically task, false otherwise.
		 */
		bool reshot(void) const;

		/**
		 * @brief Indicates whether this task is ready or not.
		 * @return If true, execution time of this task has expired, so it is ready to run.
		 */
		bool ready(void) const;

	private:
		/**
		 * @brief Reinitializes this TaskControlBlock.
		 */
		void reset(void);

		/**
		 * @brief Access method.
		 * @return Pointer to the task in this block.
		 */
		Task * task(void);

		/**
		 * @brief Access method.
		 * @param task_ The new task to set.
		 */
		void setTask(Task * task_);

		/**
		 * @brief Access method.
		 * @param timer_ The new timer to set.
		 */
		void setTimer(unsigned long timer_);

		/**
		 * @brief Access method.
		 * @param timestamp_ The new timestamp to set.
		 */
		void setTimestamp(unsigned long timestamp_);

		/**
		 * @brief Access method.
		 * @param Sets the timestamp to the actual time.
		 */
		void setActualTimestamp(void);

		/**
		 * @brief Access method.
		 * @param reshot_ If true, this is a periodically task.
		 */
		void setReshot(bool reshot_);

		/**
		 * @brief Access method.
		 * @param isTaskHelper_ If true, this task was generated by the scheduler. Therefore this block will take ownership of it.
		 */
		void setIsTaskHelper(bool isTaskHelper_);

		/**
		 * @brief Access method.
		 * @param isTaskHelperWithData_ If true, this task was generated by the scheduler. Therefore this block will take ownership of it. Also this task has data to forward for its function.
		 */
		void setIsTaskHelperWithData(bool isTaskHelperWithData_);

		/**
		 * @brief Access method.
		 * @param isFreeValue_ If true, this block is empty, so a task can be added.
		 */
		void setIsFree(bool isFreeValue_);

		// Will be executed after timer milliseconds. NULL indicates this slot is free.
		Task * _task;
		// Time in milliseconds after task will be called.
		unsigned long _timer;
		// Time when task was added. Needed for calculation.
		unsigned long _timestamp;
		// If true, task will be executed after every timer milliseconds, otherwise it will be deleted after one call.
		bool _reshot;
		// If true, the task was instanciated by the scheduler, cause the was added only as function pointer.
		bool _isTaskHelper;
		// The same as _isTaskHelper, but this one has data to forward to it's function pointer.
		bool _isTaskHelperWithData;
		// If true, there is no task in this control block.
		bool _isFree;
};

#endif // TASKCONTROLBLOCK_H
